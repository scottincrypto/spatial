[INFO] WebSocket server listening on port 3120
[INFO] Matched language server: copilot
[INFO] New connection from ::1
[INFO] Forwarding new client connection
[INFO] Created language server process: node C:\Users\scott.simpson\code\spatial\.venv\Lib\site-packages\marimo\_lsp\copilot\language-server.js --stdio
[DEBUG] Received message: {"jsonrpc":"2.0","id":"0","method":"initialize","params":{"capabilities":{"workspace":{"workspaceFolders":false}},"initializationOptions":{"editorInfo":{"name":"marimo","version":"0.1.0"},"editorPluginInfo":{"name":"marimo","version":"0.1.0"}},"processId":null,"rootUri":"file:///__marimo_copilot__.py","workspaceFolders":[]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"initialized","params":{}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","languageId":"copilot","text":"import polars as pl\nimport plotly_express as px\n\n","version":0}}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"3","method":"checkStatus","params":{}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"5","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1},"position":{"line":1,"character":14},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","languageId":"copilot","text":"","version":0}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":2},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"8","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":2},"position":{"line":4,"character":2},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":3},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# l"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":4},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# lo"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":5},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# loa"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":6},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":7},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":8},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load t"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":9},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load th"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":10},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":11},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":12},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the c"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":13},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the ch"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":14},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":15},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":16},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm d"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":17},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm da"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":18},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm dat"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":19},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"26","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":19},"position":{"line":4,"character":19},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":20},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":21},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"29","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":21},"position":{"line":6,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":22},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\nd"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":23},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"32","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":23},"position":{"line":6,"character":2},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":24},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":25},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf ="}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":26},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"36","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":26},"position":{"line":6,"character":5},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":27},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = p"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":28},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":29},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl."}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":30},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.r"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":31},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.re"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":32},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.rea"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":33},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":34},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":35},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_p"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":36},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_pa"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":37},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_par"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":38},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parq"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":39},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parqu"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":40},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parque"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":41},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"52","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":41},"position":{"line":6,"character":20},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":42},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"54","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":42},"position":{"line":6,"character":21},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":43},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"56","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":43},"position":{"line":6,"character":22},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":44},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"o\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":45},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"ou\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":46},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"out\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":47},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"outp\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":48},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"outpu\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":49},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"63","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":49},"position":{"line":6,"character":28},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":50},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"65","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":50},"position":{"line":6,"character":29},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":51},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(C:\\Users\\scott.simpson\\code\\spatial\\output\\calc_stats\\rehab_chm_stats.parquet)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"67","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":51},"position":{"line":6,"character":98},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":52},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"69","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":52},"position":{"line":6,"character":30},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":53},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"C:\\Users\\scott.simpson\\code\\spatial\\output\\calc_stats\\rehab_chm_stats.parquet\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"71","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":53},"position":{"line":6,"character":99},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":54},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"C:\\Users\\scott.simpson\\code\\spatial\\output\\shapefiles\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"73","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":54},"position":{"line":6,"character":75},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":55},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"C:\\Users\\scott.simpson\\code\\spatial\\output\\calc_stats\\rehab_chm_stats.parquet\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"75","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":55},"position":{"line":6,"character":99},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":56},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"C:\\Users\\scott.simpson\\code\\spatial\\output\\shapefiles\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"77","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":56},"position":{"line":6,"character":75},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":57},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"C:\\Users\\scott.simpson\\code\\spatial\\output\\calc_stats\\rehab_chm_stats.parquet\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"79","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":57},"position":{"line":6,"character":99},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":58},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\calc_stats\\rehab_chm_stats.parquet\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"81","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":58},"position":{"line":6,"character":22},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":59},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\rehab_chm_stats.parquet\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"83","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":59},"position":{"line":6,"character":29},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":60},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"85","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":60},"position":{"line":6,"character":41},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":61},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":62},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":63},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\nd"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":64},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"90","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":64},"position":{"line":8,"character":2},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","languageId":"copilot","text":"","version":0}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":65},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"93","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":65},"position":{"line":9,"character":2},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":66},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# c"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":67},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# ch"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":68},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# cho"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":69},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choo"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":70},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choos"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":71},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"100","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":71},"position":{"line":9,"character":8},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":72},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":73},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":74},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"104","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":74},"position":{"line":9,"character":11},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":75},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a p"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":76},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pr"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":77},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":78},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":79},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":80},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-20"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":81},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-202"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":82},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-20"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":83},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-201"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":84},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":85},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":86},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 a"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":87},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 ar"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":88},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 are"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":89},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"120","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":89},"position":{"line":9,"character":24},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":90},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":91},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"123","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":91},"position":{"line":11,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":92},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\nd"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":93},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":94},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"127","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":94},"position":{"line":11,"character":3},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":95},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_p"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":96},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pr"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":97},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":98},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":99},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":100},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_20"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":101},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_202"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":102},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_20"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":103},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_201"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":104},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2014"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":105},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_20145"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":106},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2014"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":107},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_201"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":108},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"142","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":108},"position":{"line":11,"character":11},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":109},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":110},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 ="}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":111},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"146","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":111},"position":{"line":11,"character":14},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":112},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = f"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":113},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"149","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":113},"position":{"line":14,"character":15},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":114},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = d"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":115},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":116},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df."}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"153","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":116},"position":{"line":14,"character":16},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":117},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.f"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":118},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.fi"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":119},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.fil"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":120},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filt"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":121},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filte"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":122},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"160","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":122},"position":{"line":11,"character":23},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":123},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"162","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":123},"position":{"line":11,"character":24},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":124},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(p)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":125},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":126},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":127},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.c)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":128},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.co)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":129},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":130},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col())"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":131},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col(''))"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":132},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('s'))"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":133},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('sh'))"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":134},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('sho'))"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":135},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('shor'))"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":136},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short'))"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":137},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_'))"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":138},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_i'))"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":139},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id'))"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"179","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":139},"position":{"line":11,"character":40},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":140},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'rehab_2014'))"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"181","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":140},"position":{"line":11,"character":57},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":141},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"183","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":141},"position":{"line":11,"character":53},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":142},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":143},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":144},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n\nd"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":145},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n\ndf"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":146},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n\ndf-"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":147},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n\ndf-p"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":148},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n\ndf-"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":149},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n\ndf"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":150},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n\ndf+"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":151},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n\ndf+p"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":152},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n\ndf+"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":153},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n\ndf"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"196","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":153},"position":{"line":13,"character":2},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":154},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n\ndf_"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":155},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n\ndf_p"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":156},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n\ndf_pr"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":157},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n\ndf_pre"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":158},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa'))\n\ndf_pre_2015"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"202","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":158},"position":{"line":13,"character":11},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":159},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"204","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":159},"position":{"line":11,"character":55},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","languageId":"copilot","text":"","version":0}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":160},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\np"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":161},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":162},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx."}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"209","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":162},"position":{"line":14,"character":3},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":163},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.l"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":164},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.li"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":165},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.lin"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":166},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":167},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"215","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":167},"position":{"line":14,"character":8},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":168},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(animation_frame=)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"217","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":168},"position":{"line":14,"character":24},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":169},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(animation_frame)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":170},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(animation_fram)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":171},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(animation_fra)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":172},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(animation_fr)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":173},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(animation_f)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":174},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(animation_)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":175},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(animation)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":176},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(animatio)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":177},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(animati)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":178},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(animat)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":179},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(anima)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":180},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(anim)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":181},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(ani)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":182},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(an)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":183},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(a)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":184},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":185},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"235","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":185},"position":{"line":15,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":186},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    d\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":187},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"238","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":187},"position":{"line":15,"character":6},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":188},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":189},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_p\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":190},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pr\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":191},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":192},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":193},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":194},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_20\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":195},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_202\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":196},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_20\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":197},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_201\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":198},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":199},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_20154\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":200},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"252","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":200},"position":{"line":15,"character":15},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":201},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015,\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"254","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":201},"position":{"line":15,"character":16},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":202},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015,animation_frame=\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"256","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":202},"position":{"line":15,"character":32},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":203},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015,\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"258","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":203},"position":{"line":15,"character":16},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":204},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015,\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"260","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":204},"position":{"line":16,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":205},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015,\n    x\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":206},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015,\n    x \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":207},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015,\n    x =\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":208},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015,\n    x = \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"265","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":208},"position":{"line":16,"character":8},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":209},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015,\n    x = d\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":210},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015,\n    x = da\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":211},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015,\n    x = dat\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":212},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015,\n    x = date\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"270","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":212},"position":{"line":16,"character":12},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":213},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015,\n    x = date\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"272","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":213},"position":{"line":17,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":214},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015,\n    ,x = date\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":215},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015,\n    , x = date\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"275","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":215},"position":{"line":16,"character":6},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":216},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = date\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"277","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":216},"position":{"line":15,"character":15},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":217},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = date\n    \n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":218},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = date\n    ,\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"280","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":218},"position":{"line":23,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":219},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = date\n    , \n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":220},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = date\n    , y\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":221},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = date\n    , y \n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":222},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = date\n    , y =\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":223},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = date\n    , y = \n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"286","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":223},"position":{"line":17,"character":10},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":224},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = date\n    , y = p\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"288","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":224},"position":{"line":17,"character":11},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":225},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = date\n    , y = \n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"290","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":225},"position":{"line":17,"character":10},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":226},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date\n    , y = \n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"292","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":226},"position":{"line":16,"character":11},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":227},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = \n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"294","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":227},"position":{"line":16,"character":16},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":228},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = ''\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":229},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"297","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":229},"position":{"line":17,"character":12},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":230},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p_'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"299","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":230},"position":{"line":17,"character":13},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":231},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p_9'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":232},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p_90'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"302","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":232},"position":{"line":17,"character":15},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":233},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p_9'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":234},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p_'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":235},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":236},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p9'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":237},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":238},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":239},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_h'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":240},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_he'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":241},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_hei'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":242},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_heig'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":243},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_heigh'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":244},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"315","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":244},"position":{"line":17,"character":21},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":245},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"317","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":245},"position":{"line":17,"character":22},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":246},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"319","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":246},"position":{"line":17,"character":22},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":247},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_,'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"321","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":247},"position":{"line":17,"character":23},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":248},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"323","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":248},"position":{"line":17,"character":22},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":249},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"325","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":249},"position":{"line":17,"character":23},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":250},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    \n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"327","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":250},"position":{"line":18,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":251},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    t\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":252},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    te\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":253},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    tem\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":254},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    temp\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":255},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    templ\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":256},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    templa\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":257},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    templat\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":258},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    template\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"336","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":258},"position":{"line":18,"character":12},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":259},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    ,template\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":260},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"339","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":260},"position":{"line":18,"character":6},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":261},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template \n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":262},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template =\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":263},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = \n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":264},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = ''\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":265},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'p'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":266},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'pl'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":267},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plo'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":268},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plot'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":269},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotl'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":270},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":271},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":272},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_w'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":273},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_wh'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":274},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_whi'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":275},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_whit'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":276},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"356","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":276},"position":{"line":18,"character":30},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":277},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    \n)\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015."}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":278},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    \n)\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.s"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":279},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    \n)\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.so"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":280},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    \n)\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sor"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":281},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    \n)\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"362","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":281},"position":{"line":20,"character":16},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":282},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    \n)\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":283},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    \n)\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('')"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":284},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    \n)\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('d')"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":285},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    \n)\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('da')"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"367","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":285},"position":{"line":20,"character":20},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":286},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    \n)\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('dat')"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":287},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    \n)\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"370","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":287},"position":{"line":20,"character":22},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":288},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    \n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"372","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":288},"position":{"line":19,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":289},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    ,\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":290},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , \n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"375","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":290},"position":{"line":19,"character":6},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":291},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , t\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":292},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , ti\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"378","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":292},"position":{"line":19,"character":8},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","languageId":"copilot","text":"px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , ti\n    \n)","version":0}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":293},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , tit\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":294},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , titl\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":295},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"383","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":295},"position":{"line":19,"character":11},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":296},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"385","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":296},"position":{"line":19,"character":52},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","languageId":"copilot","text":"","version":0}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":297},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"388","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":297},"position":{"line":21,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":298},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'w'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":299},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'wo'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":300},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woo'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":301},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'wood'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"393","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":301},"position":{"line":25,"character":15},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":302},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":303},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"396","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":303},"position":{"line":33,"character":16},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":304},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_c'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":305},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_co'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":306},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cov'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":307},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cove'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":308},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":309},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":310},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_p'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":311},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pc'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":312},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"406","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":312},"position":{"line":25,"character":26},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":313},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"408","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":313},"position":{"line":27,"character":16},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":314},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '%  for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":315},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% w for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":316},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% wo for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":317},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% woo for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":318},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% woor for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":319},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% woo for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":320},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% wood for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":321},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% woody for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":322},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% woodyu for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":323},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% woodyu  for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":324},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% woodyu c for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":325},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% woodyu co for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":326},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% woodyu cov for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":327},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% woodyu cove for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":328},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% woodyu cover for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"424","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":328},"position":{"line":27,"character":29},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":329},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% woody cover for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"426","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":329},"position":{"line":27,"character":22},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":330},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% wWoody cover for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"428","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":330},"position":{"line":27,"character":19},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":331},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% woody cover for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":332},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% oody cover for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":333},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% Woody cover for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"432","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":333},"position":{"line":27,"character":18},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":334},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% Woody Cover for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"434","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":334},"position":{"line":27,"character":24},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":335},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% Woody Cover  for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":336},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% Woody Cover () for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"437","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":336},"position":{"line":27,"character":30},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":337},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>) for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":338},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1) for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":339},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pct'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"441","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":339},"position":{"line":27,"character":33},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":340},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_pc'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":341},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_p'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":342},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover_'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":343},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"446","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":343},"position":{"line":25,"character":22},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":344},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfpx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":345},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfipx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":346},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfigpx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":347},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"451","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":347},"position":{"line":22,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":348},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig =px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":349},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"454","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":349},"position":{"line":22,"character":6},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":350},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"456","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":350},"position":{"line":30,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":351},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nf"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":352},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfi"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":353},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"460","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":353},"position":{"line":30,"character":3},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":354},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout("}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"462","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":354},"position":{"line":30,"character":18},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":355},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)')"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"464","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":355},"position":{"line":30,"character":47},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":356},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)',)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":357},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', )"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"467","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":357},"position":{"line":30,"character":48},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":358},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', x)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":359},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xa)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":360},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xax)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"471","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":360},"position":{"line":30,"character":51},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":361},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title='Date')"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"473","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":361},"position":{"line":30,"character":66},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":362},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=N)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":363},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=No)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":364},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=Non)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":365},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"478","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":365},"position":{"line":30,"character":64},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":366},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":367},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nf"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":368},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfi"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":369},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfig"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"483","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":369},"position":{"line":31,"character":3},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":370},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfig."}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":371},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfig.s"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":372},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfig.sh"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":373},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfig.sho"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":374},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfig.show"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"489","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":374},"position":{"line":31,"character":8},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":375},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":376},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"492","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":376},"position":{"line":31,"character":10},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":377},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfig.show()\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":378},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\nfig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfig.show()\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"495","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":378},"position":{"line":33,"character":10},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":379},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"497","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":379},"position":{"line":24,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":380},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"499","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":380},"position":{"line":32,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":381},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\nfig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\nfig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"501","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":381},"position":{"line":33,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":382},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\npx.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"503","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":382},"position":{"line":33,"character":11},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":383},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"505","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":383},"position":{"line":24,"character":7},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":384},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='C', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":385},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Co', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":386},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Coo', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":387},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Co', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":388},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='C', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":389},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":390},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='W', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":391},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Wo', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":392},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Woo', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":393},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Wood', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":394},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Woody', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":395},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Woody ', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":396},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Woody C', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":397},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Woody Co', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":398},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Woody Cov', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":399},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Woody Cove', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":400},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Woody Cover', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"523","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":400},"position":{"line":32,"character":43},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":401},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Woody Cover ', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":402},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"526","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":402},"position":{"line":32,"character":45},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":403},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":404},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\nfig.update_yaxes(tickformat='%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"529","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":404},"position":{"line":33,"character":32},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":405},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"531","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":405},"position":{"line":33,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":406},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='%0')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"533","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":406},"position":{"line":33,"character":32},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":407},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"535","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":407},"position":{"line":33,"character":31},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":408},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"537","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":408},"position":{"line":33,"character":31},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":409},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    ,\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":410},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , \n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":411},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , h\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":412},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , ho\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":413},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hov\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"543","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":413},"position":{"line":30,"character":9},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":414},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data=\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"545","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":414},"position":{"line":30,"character":17},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":415},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"547","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":415},"position":{"line":30,"character":18},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":416},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={''}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"549","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":416},"position":{"line":30,"character":19},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":417},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'w'}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":418},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'wo'}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":419},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woo'}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":420},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'wood'}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":421},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody'}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":422},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_'}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":423},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_c'}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":424},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_co'}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":425},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cov'}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":426},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cove'}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":427},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover'}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":428},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover\"'}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"562","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":428},"position":{"line":30,"character":31},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":429},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover'}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":430},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover'}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":431},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover';}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"566","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":431},"position":{"line":30,"character":32},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":432},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover'}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"568","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":432},"position":{"line":30,"character":31},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":433},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover':}\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"570","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":433},"position":{"line":30,"character":32},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":434},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.2%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"572","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":434},"position":{"line":30,"character":40},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":435},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'Wcover': ':.2%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"574","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":435},"position":{"line":30,"character":20},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":436},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'Wocover': ':.2%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":437},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'Woocover': ':.2%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":438},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'Woodcover': ':.2%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":439},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'Woodycover': ':.2%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":440},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'Woody cover': ':.2%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"580","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":440},"position":{"line":30,"character":25},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":441},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'Woody Cover': ':.2%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"582","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":441},"position":{"line":30,"character":26},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":442},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'Woody cover': ':.2%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":443},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'Wcover': ':.2%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"585","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":443},"position":{"line":30,"character":20},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":444},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.2%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"587","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":444},"position":{"line":30,"character":19},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":445},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"589","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":445},"position":{"line":30,"character":37},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","languageId":"copilot","text":"","version":0}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":446},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":447},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_f"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":448},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fi"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":449},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"595","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":449},"position":{"line":35,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":450},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":451},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig  "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"598","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":451},"position":{"line":35,"character":6},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":452},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"600","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":452},"position":{"line":34,"character":11},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":453},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    d\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":454},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"603","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":454},"position":{"line":36,"character":6},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":455},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    \n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"605","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":455},"position":{"line":39,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":456},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    ,\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":457},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , \n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":458},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , c\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":459},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , \n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":460},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , f\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":461},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , fa\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":462},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , fac\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":463},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , face\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":464},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":465},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":466},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_c\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":467},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_co\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":468},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"619","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":468},"position":{"line":39,"character":15},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":469},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col \n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":470},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col =\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":471},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = \n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"623","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":471},"position":{"line":39,"character":18},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":472},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"625","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":472},"position":{"line":39,"character":28},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":473},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    \n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":474},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    ,\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":475},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , \n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":476},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , f\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":477},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , fa\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":478},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , fac\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":479},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , face\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":480},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":481},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":482},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_c\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":483},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_co\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":484},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":485},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"639","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":485},"position":{"line":40,"character":16},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":486},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_w\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":487},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wr\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":488},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wra\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":489},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"644","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":489},"position":{"line":40,"character":20},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":490},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap \n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":491},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap =\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":492},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = \n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":493},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"649","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":493},"position":{"line":40,"character":24},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":494},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":495},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.f\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":496},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.fi\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":497},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.fil\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":498},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filt\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":499},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filte\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":500},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":501},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter()\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"658","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":501},"position":{"line":36,"character":14},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":502},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(g)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":503},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(gg)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":504},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(g)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":505},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter()\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":506},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(v)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":507},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(ve)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":508},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":509},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":510},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_t)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":511},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_ty)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":512},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_typ)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":513},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_type)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"671","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":513},"position":{"line":36,"character":22},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":514},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_type )\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"673","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":514},"position":{"line":36,"character":23},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":515},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_type -)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"675","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":515},"position":{"line":36,"character":24},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":516},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_type )\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":517},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_type =)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":518},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_type ==)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":519},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_type == )\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":520},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_type == '')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"681","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":520},"position":{"line":36,"character":27},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":521},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_type == 'p')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":522},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_type == 'pa')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":523},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_type == 'pas')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":524},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_type == 'past')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":525},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_type == 'pastu')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":526},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_type == 'pastur')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":527},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(veg_type == 'pasture')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"689","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":527},"position":{"line":36,"character":34},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":528},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pveg_type == 'pasture')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":529},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(plveg_type == 'pasture')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":530},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.veg_type == 'pasture')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":531},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.cveg_type == 'pasture')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":532},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.coveg_type == 'pasture')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":533},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.colveg_type == 'pasture')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":534},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col(veg_type == 'pasture')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"697","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":534},"position":{"line":36,"character":21},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":535},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type' == 'pasture')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"699","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":535},"position":{"line":36,"character":30},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":536},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') == 'pasture')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"701","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":536},"position":{"line":36,"character":32},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":537},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture')\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"703","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":537},"position":{"line":36,"character":34},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":538},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' )\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":539},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' &)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":540},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & )\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"707","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":540},"position":{"line":36,"character":48},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":541},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' &)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":542},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' &&)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"710","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":542},"position":{"line":36,"character":48},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":543},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' &)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":544},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & )\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"713","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":544},"position":{"line":36,"character":48},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":545},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & r)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":546},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & re)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":547},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & r)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":548},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & )\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":549},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & p)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":550},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":551},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":552},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.c)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":553},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.co)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":554},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":555},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col())\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":556},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col(''))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":557},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('r'))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":558},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('re'))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":559},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('reh'))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":560},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('reha'))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":561},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab'))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":562},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_'))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":563},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_y'))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":564},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_ye'))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":565},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_yea'))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":566},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_yeae'))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"736","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":566},"position":{"line":36,"character":66},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":567},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_yea'))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":568},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_year'))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":569},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_year'))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":570},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_year' ))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"741","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":570},"position":{"line":36,"character":68},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":571},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_year'))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"743","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":571},"position":{"line":36,"character":67},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":572},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_year') )\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":573},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_year') <)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":574},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_year') < )\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"747","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":574},"position":{"line":36,"character":71},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":575},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_year') < 2)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":576},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_year') < 20)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":577},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_year') < 202)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":578},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_year') < 2021)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"752","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":578},"position":{"line":36,"character":75},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":579},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(*pl.col('veg_type') != 'pasture' & pl.col('rehab_year') < 2021)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"754","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":579},"position":{"line":36,"character":15},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":580},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter(pl.col('veg_type') != 'pasture' & pl.col('rehab_year') < 2021)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":581},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture' & pl.col('rehab_year') < 2021)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"757","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":581},"position":{"line":36,"character":15},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":582},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & pl.col('rehab_year') < 2021)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"759","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":582},"position":{"line":36,"character":47},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":583},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021)\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"761","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":583},"position":{"line":36,"character":51},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":584},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"763","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":584},"position":{"line":36,"character":79},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":585},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    ,\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":586},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":587},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , h\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":588},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , he\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"768","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":588},"position":{"line":43,"character":8},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":589},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=800\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"770","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":589},"position":{"line":43,"character":16},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":590},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=80\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":591},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=8\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":592},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"774","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":592},"position":{"line":43,"character":13},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":593},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=2\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":594},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=24\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":595},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=240\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":596},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=2400\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"779","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":596},"position":{"line":43,"character":17},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":597},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=8\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":598},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=80\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":599},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=800\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"783","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":599},"position":{"line":43,"character":16},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":600},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=80\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":601},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=8\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":602},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":603},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":604},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=12\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":605},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=120\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":606},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"791","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":606},"position":{"line":43,"character":17},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":607},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":608},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n\n\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"794","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":608},"position":{"line":37,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":609},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\nn_categories = df['category'].nunique()\nn_cols = 3  # facet_col_wrap value\nn_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"796","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":609},"position":{"line":37,"character":46},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":610},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_n_categories = df['category'].nunique()\nn_cols = 3  # facet_col_wrap value\nn_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"798","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":610},"position":{"line":35,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":611},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_n_categories = df['category'].nunique()\n_n_cols = 3  # facet_col_wrap value\nn_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"800","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":611},"position":{"line":36,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":612},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_n_categories = df['category'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"802","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":612},"position":{"line":37,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":613},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n\n_n_categories = df['category'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":614},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n\n\n_n_categories = df['category'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"805","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":614},"position":{"line":37,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":615},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_\n\n_n_categories = df['category'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":616},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_d\n\n_n_categories = df['category'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":617},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df\n\n_n_categories = df['category'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":618},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df \n\n_n_categories = df['category'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":619},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df =\n\n_n_categories = df['category'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":620},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = \n\n_n_categories = df['category'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"812","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":620},"position":{"line":35,"character":6},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":621},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = \n\n_n_categories = df['category'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    \n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"814","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":621},"position":{"line":42,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":622},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = df['category'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    \n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"816","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":622},"position":{"line":35,"character":82},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":623},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = df['category'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    _\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":624},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = df['category'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    _d\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":625},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = df['category'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"820","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":625},"position":{"line":42,"character":7},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":626},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = df['short_id'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"822","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":626},"position":{"line":37,"character":28},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":627},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = p'short_id'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":628},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl'short_id'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":629},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.'short_id'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":630},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.c'short_id'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":631},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.co'short_id'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":632},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col'short_id'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":633},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id'].nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"830","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":633},"position":{"line":37,"character":23},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":634},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id'.nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"832","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":634},"position":{"line":37,"character":33},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":635},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').nunique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"834","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":635},"position":{"line":37,"character":34},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":636},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"836","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":636},"position":{"line":37,"character":37},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":637},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + n_cols - 1) // n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"838","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":637},"position":{"line":39,"character":24},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":638},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"840","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":638},"position":{"line":39,"character":28},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":639},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = 3\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"842","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":639},"position":{"line":39,"character":44},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":640},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"844","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":640},"position":{"line":46,"character":30},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":641},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    \n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"846","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":641},"position":{"line":47,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":642},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    ,\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":643},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , \n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":644},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , f\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":645},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , fa\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":646},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , fac\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":647},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , face\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":648},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":649},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"855","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":649},"position":{"line":47,"character":12},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":650},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_r\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":651},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_ro\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":652},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":653},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":654},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_w\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":655},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wr\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":656},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wra\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":657},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":658},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap \n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":659},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap =\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":660},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = \n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"867","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":660},"position":{"line":47,"character":23},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":661},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=1200\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"869","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":661},"position":{"line":47,"character":30},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":662},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=2\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":663},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=25\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":664},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":665},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"874","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":665},"position":{"line":50,"character":17},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":666},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*n\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":667},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*n_\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"877","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":667},"position":{"line":69,"character":18},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":668},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*n_r\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":669},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*n_\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":670},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*n\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":671},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":672},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":673},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":674},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":675},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_r\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":676},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_ro\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":677},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_row\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":678},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"889","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":678},"position":{"line":50,"character":24},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":679},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"891","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":679},"position":{"line":47,"character":26},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":680},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    # , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"893","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":680},"position":{"line":50,"character":26},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":681},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"895","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":681},"position":{"line":50,"character":24},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":682},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":683},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\np\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"898","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":683},"position":{"line":41,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":684},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"900","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":684},"position":{"line":41,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":685},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":686},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"903","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":686},"position":{"line":55,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":687},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":688},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":689},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":690},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_r"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":691},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_ro"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":692},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_row"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":693},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_rows"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"911","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":693},"position":{"line":55,"character":7},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":694},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\nc"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"913","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":694},"position":{"line":55,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":695},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":696},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":697},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":698},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":699},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_c"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":700},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_ca"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":701},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_cat"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":702},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_cate"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":703},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categ"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":704},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_catego"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":705},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categor"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":706},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categori"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":707},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categorie"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":708},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"928","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":708},"position":{"line":55,"character":13},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":709},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = pl.col('short_id').n_unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"930","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":709},"position":{"line":53,"character":38},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":710},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = \n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"932","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":710},"position":{"line":37,"character":16},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":711},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = -\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":712},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = -d\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":713},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = -df\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"936","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":713},"position":{"line":37,"character":19},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":714},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = -d\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":715},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = -\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":716},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = \n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":717},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = +\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"941","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":717},"position":{"line":37,"character":17},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":718},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = \n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":719},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":720},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _d\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":721},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":722},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":723},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.s\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":724},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.se\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":725},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.sel\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":726},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.sele\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":727},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.selec\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":728},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":729},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select9\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":730},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":731},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"956","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":731},"position":{"line":37,"character":27},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":732},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"958","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":732},"position":{"line":37,"character":28},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":733},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').n_unique()')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"960","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":733},"position":{"line":37,"character":49},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":734},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').n_unique(')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":735},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').n_unique')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"963","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":735},"position":{"line":58,"character":48},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":736},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').n_uniqu')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":737},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').n_uniq')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":738},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').n_uni')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":739},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').n_un')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":740},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').n_u')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":741},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').n_')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":742},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').n')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":743},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":744},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id')')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"973","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":744},"position":{"line":37,"character":38},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":745},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id'))\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":746},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":747},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id')_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"977","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":747},"position":{"line":37,"character":38},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":748},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id')._n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"979","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":748},"position":{"line":37,"character":39},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":749},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').d_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":750},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').di_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":751},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').dis_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":752},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').dist_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":753},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').disti_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":754},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').distin_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":755},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').distinc_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":756},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').distinct_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":757},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').distinct(_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":758},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').distinct()_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"990","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":758},"position":{"line":37,"character":49},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":759},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').distinct()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"992","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":759},"position":{"line":38,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":760},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').u()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":761},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').un()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":762},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').uni()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":763},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').uniq()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":764},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').uniqu()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":765},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"999","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":765},"position":{"line":37,"character":45},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":766},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select(p'short_id').unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":767},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select(pl'short_id').unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":768},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select(pl.'short_id').unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":769},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select(pl.c'short_id').unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":770},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select(pl.co'short_id').unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":771},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select(pl.col'short_id').unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":772},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select(pl.col('short_id').unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1007","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":772},"position":{"line":37,"character":34},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":773},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select(pl.col('short_id')).unique()\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1009","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":773},"position":{"line":37,"character":45},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":774},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select(pl.col('short_id'))x\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1011","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":774},"position":{"line":37,"character":47},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":775},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select(pl.col('short_id'))\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1013","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":775},"position":{"line":37,"character":46},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":776},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('pl.col('short_id')')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":777},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('s')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":778},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('sh')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":779},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('sho')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":780},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('shor')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":781},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":782},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":783},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_i')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":784},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id')\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1023","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":784},"position":{"line":37,"character":36},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":785},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id')\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1025","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":785},"position":{"line":39,"character":38},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":786},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1027","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":786},"position":{"line":37,"character":39},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":787},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').u\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1029","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":787},"position":{"line":37,"character":40},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":788},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":789},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').d\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":790},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').di\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1033","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":790},"position":{"line":37,"character":41},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":791},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').d\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":792},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1036","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":792},"position":{"line":37,"character":39},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":793},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').u\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":794},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').un\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":795},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').uni\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":796},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').uniq\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":797},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').uniqu\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":798},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":799},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique()\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":800},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique()\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1045","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":800},"position":{"line":37,"character":47},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":801},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1047","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":801},"position":{"line":37,"character":54},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":802},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n# _n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1049","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":802},"position":{"line":38,"character":36},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":803},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1051","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":803},"position":{"line":3,"character":34},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","languageId":"copilot","text":"import polars as pl\nimport plotly.express as px\n\n","version":0}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","languageId":"copilot","text":"# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')","version":0}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","languageId":"copilot","text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf","version":0}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","languageId":"copilot","text":"_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()","version":0}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","languageId":"copilot","text":"_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()","version":0}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","languageId":"copilot","text":"_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n# _n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories","version":0}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":804},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n# _fig = px.line(\n#     _df\n#     , x = 'date'\n#     , y = 'p90_height_m'\n#     , facet_col = 'short_id'\n#     , facet_col_wrap = _n_cols\n#     # , facet_row_wrap = _n_rows\n#     , template = 'plotly_white'\n#     , title = 'P90 Height Over Time for Area b9ceaa'\n#     , height=250*_n_rows\n# )\n# _fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n# _fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1059","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":804},"position":{"line":39,"character":30},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":805},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1061","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":805},"position":{"line":54,"character":11},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":806},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1063","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":806},"position":{"line":55,"character":15},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":807},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":808},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":809},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n\n# Reduce vertical spacing to give more room to actual plots\nfig.update_layout(\n    annotations=[dict(yshift=-10) for annotation in fig.layout.annotations]\n)\n\n# Or if you have row facets, reduce row spacing\nfig.update_layout(facet_row_spacing=0.02)  # Reduce from default ~0.07\nfig.show()\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":810},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n\n# Reduce vertical spacing to give more room to actual plots\nfig.update_layout(\n    annotations=[dict(yshift=-10) for annotation in fig.layout.annotations]\n)\n\n# Or if you have row facets, reduce row spacing\nfig.update_layout(facet_row_spacing=0.02)  # Reduce from default ~0.07\nfig.show()\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":811},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n\n# Reduce vertical spacing to give more room to actual plots\nfig.update_layout(\n    annotations=[dict(yshift=-10) for annotation in fig.layout.annotations]\n)\n\n# Or if you have row facets, reduce row spacing\nfig.update_layout(facet_row_spacing=0.02)  # Reduce from default ~0.07\nfig.show()\n\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1069","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":811},"position":{"line":64,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":812},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n\n# Reduce vertical spacing to give more room to actual plots\n_fig.update_layout(\n    annotations=[dict(yshift=-10) for annotation in fig.layout.annotations]\n)\n\n# Or if you have row facets, reduce row spacing\nfig.update_layout(facet_row_spacing=0.02)  # Reduce from default ~0.07\nfig.show()\n\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1071","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":812},"position":{"line":56,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":813},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n\n# Reduce vertical spacing to give more room to actual plots\n_fig.update_layout(\n    annotations=[dict(yshift=-10) for annotation in fig.layout.annotations]\n)\n\n# Or if you have row facets, reduce row spacing\n_fig.update_layout(facet_row_spacing=0.02)  # Reduce from default ~0.07\nfig.show()\n\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1073","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":813},"position":{"line":61,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":814},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n\n# Reduce vertical spacing to give more room to actual plots\n_fig.update_layout(\n    annotations=[dict(yshift=-10) for annotation in fig.layout.annotations]\n)\n\n# Or if you have row facets, reduce row spacing\n_fig.update_layout(facet_row_spacing=0.02)  # Reduce from default ~0.07\nf\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":815},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n\n# Reduce vertical spacing to give more room to actual plots\n_fig.update_layout(\n    annotations=[dict(yshift=-10) for annotation in fig.layout.annotations]\n)\n\n# Or if you have row facets, reduce row spacing\n_fig.update_layout(facet_row_spacing=0.02)  # Reduce from default ~0.07\n\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":816},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n\n# Reduce vertical spacing to give more room to actual plots\n_fig.update_layout(\n    annotations=[dict(yshift=-10) for annotation in fig.layout.annotations]\n)\n\n# Or if you have row facets, reduce row spacing\n_fig.update_layout(facet_row_spacing=0.02)  # Reduce from default ~0.07\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1077","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":816},"position":{"line":61,"character":71},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":817},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n\n# Reduce vertical spacing to give more room to actual plots\n_fig.update_layout(\n    annotations=[dict(yshift=-10) for annotation in fig.layout.annotations]\n)\n\n# Or if you have row facets, reduce row spacing\n# _fig.update_layout(facet_row_spacing=0.02)  # Reduce from default ~0.07\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1079","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":817},"position":{"line":61,"character":73},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":818},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n\n# Reduce vertical spacing to give more room to actual plots\n_fig.update_layout(\n    annotations=[dict(yshift=-10) for annotation in fig.layout.annotations]\n)\n\n# Or if you have row facets, reduce row spacing\n_fig.update_layout(facet_row_spacing=0.02)  # Reduce from default ~0.07\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1081","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":818},"position":{"line":61,"character":25},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":819},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1083","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":819},"position":{"line":54,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":820},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":821},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.update_layout(\n    margin=dict(t=50, b=50, l=50, r=50),  # Reduce margins\n    title_y=0.98  # Move title up to save space\n)\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1086","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":821},"position":{"line":57,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":822},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=N, xaxis_title=None)\n_fig.update_layout(\n    margin=dict(t=50, b=50, l=50, r=50),  # Reduce margins\n    title_y=0.98  # Move title up to save space\n)\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":823},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=No, xaxis_title=None)\n_fig.update_layout(\n    margin=dict(t=50, b=50, l=50, r=50),  # Reduce margins\n    title_y=0.98  # Move title up to save space\n)\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":824},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=Non, xaxis_title=None)\n_fig.update_layout(\n    margin=dict(t=50, b=50, l=50, r=50),  # Reduce margins\n    title_y=0.98  # Move title up to save space\n)\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":825},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n_fig.update_layout(\n    margin=dict(t=50, b=50, l=50, r=50),  # Reduce margins\n    title_y=0.98  # Move title up to save space\n)\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1091","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":825},"position":{"line":53,"character":35},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":826},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1093","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":826},"position":{"line":54,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":827},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    # , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1095","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":827},"position":{"line":51,"character":13},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":828},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1097","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":828},"position":{"line":51,"character":15},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":829},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 2  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1099","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":829},"position":{"line":38,"character":11},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":830},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1101","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":830},"position":{"line":38,"character":11},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":831},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 201))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":832},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2019))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1104","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":832},"position":{"line":35,"character":80},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":833},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 201))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":834},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1107","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":834},"position":{"line":35,"character":80},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":835},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 201))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":836},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2017))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1110","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":836},"position":{"line":35,"character":80},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":837},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 201))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":838},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2016))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=250*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1113","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":838},"position":{"line":35,"character":80},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":839},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2016))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=4*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":840},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2016))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=40*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":841},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2016))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1117","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":841},"position":{"line":51,"character":16},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":842},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1119","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":842},"position":{"line":35,"character":80},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":843},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    \n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1121","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":843},"position":{"line":52,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":844},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    ,\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":845},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , \n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":846},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , f\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":847},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , fa\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":848},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , fac\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":849},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , face\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":850},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":851},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":852},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_r\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":853},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_ro\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":854},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":855},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1134","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":855},"position":{"line":52,"character":16},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":856},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_s\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":857},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_sp\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":858},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spa\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":859},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spac\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":860},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spaci\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":861},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacin\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":862},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":863},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing \n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":864},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing =\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":865},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = \n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":866},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":867},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0-\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1147","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":867},"position":{"line":52,"character":28},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":868},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1149","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":868},"position":{"line":52,"character":27},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":869},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":870},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.0\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1152","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":870},"position":{"line":52,"character":29},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":871},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2018))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.04\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1154","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":871},"position":{"line":52,"character":30},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":872},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 201))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.04\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":873},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 20))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.04\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":874},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 202))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.04\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":875},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2020))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.04\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":876},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2020-))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.04\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":877},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2020))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.04\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":878},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 202))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.04\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":879},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.04\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1163","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":879},"position":{"line":35,"character":80},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":880},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.03\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1165","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":880},"position":{"line":52,"character":30},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":881},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.0\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":882},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.01\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1168","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":882},"position":{"line":52,"character":30},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":883},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.001\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1170","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":883},"position":{"line":52,"character":30},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":884},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1172","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":884},"position":{"line":52,"character":31},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":885},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1174","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":885},"position":{"line":35,"character":7},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":886},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1176","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":886},"position":{"line":36,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":887},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1178","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":887},"position":{"line":36,"character":8},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":888},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n       \n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1180","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":888},"position":{"line":37,"character":7},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":889},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n       .\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":890},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n       . \n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1183","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":890},"position":{"line":37,"character":9},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":891},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n       .\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":892},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n       \n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":893},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        \n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":894},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":895},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        . \n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1189","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":895},"position":{"line":37,"character":10},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":896},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":897},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .s\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":898},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .so\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":899},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sor\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":900},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":901},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort()\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1196","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":901},"position":{"line":37,"character":14},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":902},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(b)\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":903},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by)\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1199","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":903},"position":{"line":37,"character":16},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":904},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=)\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1201","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":904},"position":{"line":37,"character":17},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":905},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by='')\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1203","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":905},"position":{"line":37,"character":18},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":906},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=)\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1205","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":906},"position":{"line":37,"character":17},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":907},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1207","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":907},"position":{"line":37,"character":37},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":908},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n       \n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":909},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1210","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":909},"position":{"line":38,"character":7},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","languageId":"copilot","text":"","version":0}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":910},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":911},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# c"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":912},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# ca"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":913},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# cal"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":914},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calc"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":915},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calcu"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":916},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calcul"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":917},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calcula"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":918},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculat"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":919},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":920},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1223","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":920},"position":{"line":61,"character":12},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":921},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate l"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":922},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate li"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":923},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate lin"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":924},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate line"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":925},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linea"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":926},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":927},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":928},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear r"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":929},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear re"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":930},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear reg"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":931},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regr"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1235","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":931},"position":{"line":62,"character":22},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":932},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regre"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":933},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":934},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regress"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":935},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regressi"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1240","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":935},"position":{"line":62,"character":26},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":936},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regressio"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":937},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":938},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":939},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression b"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":940},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression by"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1246","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":940},"position":{"line":61,"character":32},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":941},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression b"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":942},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":943},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1250","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":943},"position":{"line":61,"character":29},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":944},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":945},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":946},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1254","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":946},"position":{"line":61,"character":32},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":947},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1256","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":947},"position":{"line":61,"character":51},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":948},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1258","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":948},"position":{"line":62,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":949},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\nimport polars as pl\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\n\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1260","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":949},"position":{"line":62,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":950},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\nimport polars as pl\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1262","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":950},"position":{"line":62,"character":18},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":951},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\nimport polars as pl\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nprint(results)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1264","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":951},"position":{"line":120,"character":14},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":952},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nprint(results)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1266","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":952},"position":{"line":63,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":953},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nr"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":954},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nre"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":955},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":956},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresu"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":957},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresul"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":958},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresult"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":959},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1274","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":959},"position":{"line":117,"character":7},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":960},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1276","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":960},"position":{"line":115,"character":23},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":961},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\n\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1278","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":961},"position":{"line":117,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":962},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\ni\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":963},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nim\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":964},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimp\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":965},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimpo\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":966},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimpor\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":967},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":968},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport \n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":969},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport p\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":970},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport po\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":971},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport pol\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":972},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport pola\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":973},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polar\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":974},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":975},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":976},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_s\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":977},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":978},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_s\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":979},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_s \n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":980},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_s a\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":981},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_s \n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":982},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_s\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":983},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":984},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_d\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":985},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":986},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_dsa\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":987},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_dsa \n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1305","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":987},"position":{"line":117,"character":18},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":988},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_dsa\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":989},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":990},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds \n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":991},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds a\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":992},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":993},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as \n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":994},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as p\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1313","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":994},"position":{"line":117,"character":21},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":995},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pd\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":996},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# calculate linear regression a and b for each area\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_linear_regression(date_numeric, height):\n    \"\"\"Fit linear regression and return slope, intercept, r_squared\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None]\n    \n    X = np.array(date_numeric).reshape(-1, 1)\n    y = np.array(height)\n    \n    # Remove any NaN values\n    mask = ~(np.isnan(X.flatten()) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None]\n    \n    X_clean = X[mask].reshape(-1, 1)\n    y_clean = y[mask]\n    \n    model = LinearRegression()\n    model.fit(X_clean, y_clean)\n    \n    slope = model.coef_[0]\n    intercept = model.intercept_\n    r_squared = model.score(X_clean, y_clean)\n    \n    return [slope, intercept, r_squared]\n\n# Apply linear regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_linear_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\"\n])\n\nresults\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1316","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":996},"position":{"line":117,"character":23},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":997},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":998},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch) for regression\ndf_regression = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]).group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\")\n]).with_columns([\n    # Fit linear regression for each group\n    pds.fit_df(\"date_numeric\", \"p90_height_m\", method=\"linear\").alias(\"regression_fit\")\n]).with_columns([\n    # Extract coefficients and statistics\n    pl.col(\"regression_fit\").struct.field(\"slope\").alias(\"slope_m_per_day\"),\n    pl.col(\"regression_fit\").struct.field(\"intercept\").alias(\"intercept\"),\n    pl.col(\"regression_fit\").struct.field(\"r2\").alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\",\n    \"growth_rate_m_per_year\", \n    \"intercept\",\n    \"r_squared\"\n])"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1319","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":998},"position":{"line":84,"character":2},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":999},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch) for regression\ndf_regression = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]).group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\")\n]).with_columns([\n    # Fit linear regression for each group\n    pds.fit_df(\"date_numeric\", \"p90_height_m\", method=\"linear\").alias(\"regression_fit\")\n]).with_columns([\n    # Extract coefficients and statistics\n    pl.col(\"regression_fit\").struct.field(\"slope\").alias(\"slope_m_per_day\"),\n    pl.col(\"regression_fit\").struct.field(\"intercept\").alias(\"intercept\"),\n    pl.col(\"regression_fit\").struct.field(\"r2\").alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\",\n    \"growth_rate_m_per_year\", \n    \"intercept\",\n    \"r_squared\"\n])\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1000},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch) for regression\ndf_regression = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]).group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\")\n]).with_columns([\n    # Fit linear regression for each group\n    pds.fit_df(\"date_numeric\", \"p90_height_m\", method=\"linear\").alias(\"regression_fit\")\n]).with_columns([\n    # Extract coefficients and statistics\n    pl.col(\"regression_fit\").struct.field(\"slope\").alias(\"slope_m_per_day\"),\n    pl.col(\"regression_fit\").struct.field(\"intercept\").alias(\"intercept\"),\n    pl.col(\"regression_fit\").struct.field(\"r2\").alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\",\n    \"growth_rate_m_per_year\", \n    \"intercept\",\n    \"r_squared\"\n])\n\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1322","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1000},"position":{"line":86,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1001},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch) for regression\ndf_regression = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]).group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\")\n]).with_columns([\n    # Fit linear regression for each group\n    pds.fit_df(\"date_numeric\", \"p90_height_m\", method=\"linear\").alias(\"regression_fit\")\n]).with_columns([\n    # Extract coefficients and statistics\n    pl.col(\"regression_fit\").struct.field(\"slope\").alias(\"slope_m_per_day\"),\n    pl.col(\"regression_fit\").struct.field(\"intercept\").alias(\"intercept\"),\n    pl.col(\"regression_fit\").struct.field(\"r2\").alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\",\n    \"growth_rate_m_per_year\", \n    \"intercept\",\n    \"r_squared\"\n])\n\nd"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1002},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch) for regression\ndf_regression = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]).group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\")\n]).with_columns([\n    # Fit linear regression for each group\n    pds.fit_df(\"date_numeric\", \"p90_height_m\", method=\"linear\").alias(\"regression_fit\")\n]).with_columns([\n    # Extract coefficients and statistics\n    pl.col(\"regression_fit\").struct.field(\"slope\").alias(\"slope_m_per_day\"),\n    pl.col(\"regression_fit\").struct.field(\"intercept\").alias(\"intercept\"),\n    pl.col(\"regression_fit\").struct.field(\"r2\").alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\",\n    \"growth_rate_m_per_year\", \n    \"intercept\",\n    \"r_squared\"\n])\n\ndf"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1003},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch) for regression\ndf_regression = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]).group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\")\n]).with_columns([\n    # Fit linear regression for each group\n    pds.fit_df(\"date_numeric\", \"p90_height_m\", method=\"linear\").alias(\"regression_fit\")\n]).with_columns([\n    # Extract coefficients and statistics\n    pl.col(\"regression_fit\").struct.field(\"slope\").alias(\"slope_m_per_day\"),\n    pl.col(\"regression_fit\").struct.field(\"intercept\").alias(\"intercept\"),\n    pl.col(\"regression_fit\").struct.field(\"r2\").alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\",\n    \"growth_rate_m_per_year\", \n    \"intercept\",\n    \"r_squared\"\n])\n\ndf_"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1004},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch) for regression\ndf_regression = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]).group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\")\n]).with_columns([\n    # Fit linear regression for each group\n    pds.fit_df(\"date_numeric\", \"p90_height_m\", method=\"linear\").alias(\"regression_fit\")\n]).with_columns([\n    # Extract coefficients and statistics\n    pl.col(\"regression_fit\").struct.field(\"slope\").alias(\"slope_m_per_day\"),\n    pl.col(\"regression_fit\").struct.field(\"intercept\").alias(\"intercept\"),\n    pl.col(\"regression_fit\").struct.field(\"r2\").alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\",\n    \"growth_rate_m_per_year\", \n    \"intercept\",\n    \"r_squared\"\n])\n\ndf_g"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1005},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch) for regression\ndf_regression = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]).group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\")\n]).with_columns([\n    # Fit linear regression for each group\n    pds.fit_df(\"date_numeric\", \"p90_height_m\", method=\"linear\").alias(\"regression_fit\")\n]).with_columns([\n    # Extract coefficients and statistics\n    pl.col(\"regression_fit\").struct.field(\"slope\").alias(\"slope_m_per_day\"),\n    pl.col(\"regression_fit\").struct.field(\"intercept\").alias(\"intercept\"),\n    pl.col(\"regression_fit\").struct.field(\"r2\").alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\",\n    \"growth_rate_m_per_year\", \n    \"intercept\",\n    \"r_squared\"\n])\n\ndf_"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1006},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch) for regression\ndf_regression = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]).group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\")\n]).with_columns([\n    # Fit linear regression for each group\n    pds.fit_df(\"date_numeric\", \"p90_height_m\", method=\"linear\").alias(\"regression_fit\")\n]).with_columns([\n    # Extract coefficients and statistics\n    pl.col(\"regression_fit\").struct.field(\"slope\").alias(\"slope_m_per_day\"),\n    pl.col(\"regression_fit\").struct.field(\"intercept\").alias(\"intercept\"),\n    pl.col(\"regression_fit\").struct.field(\"r2\").alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\",\n    \"growth_rate_m_per_year\", \n    \"intercept\",\n    \"r_squared\"\n])\n\ndf_r"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1007},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch) for regression\ndf_regression = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]).group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\")\n]).with_columns([\n    # Fit linear regression for each group\n    pds.fit_df(\"date_numeric\", \"p90_height_m\", method=\"linear\").alias(\"regression_fit\")\n]).with_columns([\n    # Extract coefficients and statistics\n    pl.col(\"regression_fit\").struct.field(\"slope\").alias(\"slope_m_per_day\"),\n    pl.col(\"regression_fit\").struct.field(\"intercept\").alias(\"intercept\"),\n    pl.col(\"regression_fit\").struct.field(\"r2\").alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\",\n    \"growth_rate_m_per_year\", \n    \"intercept\",\n    \"r_squared\"\n])\n\ndf_re"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1008},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch) for regression\ndf_regression = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]).group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\")\n]).with_columns([\n    # Fit linear regression for each group\n    pds.fit_df(\"date_numeric\", \"p90_height_m\", method=\"linear\").alias(\"regression_fit\")\n]).with_columns([\n    # Extract coefficients and statistics\n    pl.col(\"regression_fit\").struct.field(\"slope\").alias(\"slope_m_per_day\"),\n    pl.col(\"regression_fit\").struct.field(\"intercept\").alias(\"intercept\"),\n    pl.col(\"regression_fit\").struct.field(\"r2\").alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\",\n    \"growth_rate_m_per_year\", \n    \"intercept\",\n    \"r_squared\"\n])\n\ndf_reg"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1331","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1008},"position":{"line":86,"character":6},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1009},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch) for regression\ndf_regression = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]).group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\")\n]).with_columns([\n    # Fit linear regression for each group\n    pds.fit_df(\"date_numeric\", \"p90_height_m\", method=\"linear\").alias(\"regression_fit\")\n]).with_columns([\n    # Extract coefficients and statistics\n    pl.col(\"regression_fit\").struct.field(\"slope\").alias(\"slope_m_per_day\"),\n    pl.col(\"regression_fit\").struct.field(\"intercept\").alias(\"intercept\"),\n    pl.col(\"regression_fit\").struct.field(\"r2\").alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\",\n    \"growth_rate_m_per_year\", \n    \"intercept\",\n    \"r_squared\"\n])\n\ndf_regression = df_regression.sort(\"growth_rate_m_per_year\", descending=True)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1333","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1009},"position":{"line":86,"character":77},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1010},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch) for regression\ndf_regression = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]).group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\")\n]).with_columns([\n    # Fit linear regression for each group\n    pds.fit_df(\"date_numeric\", \"p90_height_m\", method=\"linear\").alias(\"regression_fit\")\n]).with_columns([\n    # Extract coefficients and statistics\n    pl.col(\"regression_fit\").struct.field(\"slope\").alias(\"slope_m_per_day\"),\n    pl.col(\"regression_fit\").struct.field(\"intercept\").alias(\"intercept\"),\n    pl.col(\"regression_fit\").struct.field(\"r2\").alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\",\n    \"growth_rate_m_per_year\", \n    \"intercept\",\n    \"r_squared\"\n])\n\ndf_regression = "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1011},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch) for regression\ndf_regression = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]).group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\")\n]).with_columns([\n    # Fit linear regression for each group\n    pds.fit_df(\"date_numeric\", \"p90_height_m\", method=\"linear\").alias(\"regression_fit\")\n]).with_columns([\n    # Extract coefficients and statistics\n    pl.col(\"regression_fit\").struct.field(\"slope\").alias(\"slope_m_per_day\"),\n    pl.col(\"regression_fit\").struct.field(\"intercept\").alias(\"intercept\"),\n    pl.col(\"regression_fit\").struct.field(\"r2\").alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\",\n    \"growth_rate_m_per_year\", \n    \"intercept\",\n    \"r_squared\"\n])\n\ndf_regression ="}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1012},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch) for regression\ndf_regression = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]).group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\")\n]).with_columns([\n    # Fit linear regression for each group\n    pds.fit_df(\"date_numeric\", \"p90_height_m\", method=\"linear\").alias(\"regression_fit\")\n]).with_columns([\n    # Extract coefficients and statistics\n    pl.col(\"regression_fit\").struct.field(\"slope\").alias(\"slope_m_per_day\"),\n    pl.col(\"regression_fit\").struct.field(\"intercept\").alias(\"intercept\"),\n    pl.col(\"regression_fit\").struct.field(\"r2\").alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\",\n    \"growth_rate_m_per_year\", \n    \"intercept\",\n    \"r_squared\"\n])\n\ndf_regression "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1337","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1012},"position":{"line":86,"character":14},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","languageId":"copilot","text":"","version":0}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1013},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch) for regression\ndf_regression = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]).group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\")\n]).with_columns([\n    # Fit linear regression for each group\n    pds.fit_df(\"date_numeric\", \"p90_height_m\", method=\"linear\").alias(\"regression_fit\")\n]).with_columns([\n    # Extract coefficients and statistics\n    pl.col(\"regression_fit\").struct.field(\"slope\").alias(\"slope_m_per_day\"),\n    pl.col(\"regression_fit\").struct.field(\"intercept\").alias(\"intercept\"),\n    pl.col(\"regression_fit\").struct.field(\"r2\").alias(\"r_squared\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\")\n]).select([\n    \"short_id\",\n    \"growth_rate_m_per_year\", \n    \"intercept\",\n    \"r_squared\"\n])\n\ndf_regression \ndf.select(\n    pds.query_lstsq_report(\n        pl.col(\"x1\"), \"x2\", # str | pl.Expr\n        target = \"y\",\n        add_bias=False\n    ).alias(\"report\")\n).unnest(\"report\")"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1340","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1013},"position":{"line":93,"character":18},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1014},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport polars_ds as pds\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\ndf.select(\n    pds.query_lstsq_report(\n        pl.col(\"x1\"), \"x2\", # str | pl.Expr\n        target = \"y\",\n        add_bias=False\n    ).alias(\"report\")\n).unnest(\"report\")\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1015},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\ndf.select(\n    pds.query_lstsq_report(\n        pl.col(\"x1\"), \"x2\", # str | pl.Expr\n        target = \"y\",\n        add_bias=False\n    ).alias(\"report\")\n).unnest(\"report\")\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport statsmodels.api as sm\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1343","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1015},"position":{"line":68,"character":28},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1016},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1017},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(date_numeric, height):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None, None, None]\n    \n    # Convert to numpy arrays and remove NaN values\n    X = np.array(date_numeric)\n    y = np.array(height)\n    \n    mask = ~(np.isnan(X) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None, None, None]\n    \n    X_clean = X[mask]\n    y_clean = y[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(X_clean)\n    \n    # Fit the model\n    model = sm.OLS(y_clean, X_with_const)\n    results = model.fit()\n    \n    # Extract results\n    intercept = results.params[0]\n    slope = results.params[1]\n    r_squared = results.rsquared\n    p_value = results.pvalues[1]  # p-value for the slope\n    std_err = results.bse[1]  # standard error for the slope\n    \n    return [slope, intercept, r_squared, p_value, std_err]\n\n# Apply OLS regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_ols_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\"),\n    pl.col(\"regression_results\").list.get(3).alias(\"p_value\"),\n    pl.col(\"regression_results\").list.get(4).alias(\"std_error\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n    # Convert standard error from m/day to m/year\n    (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\",\n    \"p_value\",\n    \"std_error_m_per_year\"\n])"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1346","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1017},"position":{"line":127,"character":2},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1018},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(date_numeric, height):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None, None, None]\n    \n    # Convert to numpy arrays and remove NaN values\n    X = np.array(date_numeric)\n    y = np.array(height)\n    \n    mask = ~(np.isnan(X) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None, None, None]\n    \n    X_clean = X[mask]\n    y_clean = y[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(X_clean)\n    \n    # Fit the model\n    model = sm.OLS(y_clean, X_with_const)\n    results = model.fit()\n    \n    # Extract results\n    intercept = results.params[0]\n    slope = results.params[1]\n    r_squared = results.rsquared\n    p_value = results.pvalues[1]  # p-value for the slope\n    std_err = results.bse[1]  # standard error for the slope\n    \n    return [slope, intercept, r_squared, p_value, std_err]\n\n# Apply OLS regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_ols_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\"),\n    pl.col(\"regression_results\").list.get(3).alias(\"p_value\"),\n    pl.col(\"regression_results\").list.get(4).alias(\"std_error\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n    # Convert standard error from m/day to m/year\n    (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\",\n    \"p_value\",\n    \"std_error_m_per_year\"\n])\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1019},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(date_numeric, height):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None, None, None]\n    \n    # Convert to numpy arrays and remove NaN values\n    X = np.array(date_numeric)\n    y = np.array(height)\n    \n    mask = ~(np.isnan(X) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None, None, None]\n    \n    X_clean = X[mask]\n    y_clean = y[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(X_clean)\n    \n    # Fit the model\n    model = sm.OLS(y_clean, X_with_const)\n    results = model.fit()\n    \n    # Extract results\n    intercept = results.params[0]\n    slope = results.params[1]\n    r_squared = results.rsquared\n    p_value = results.pvalues[1]  # p-value for the slope\n    std_err = results.bse[1]  # standard error for the slope\n    \n    return [slope, intercept, r_squared, p_value, std_err]\n\n# Apply OLS regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_ols_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\"),\n    pl.col(\"regression_results\").list.get(3).alias(\"p_value\"),\n    pl.col(\"regression_results\").list.get(4).alias(\"std_error\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n    # Convert standard error from m/day to m/year\n    (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\",\n    \"p_value\",\n    \"std_error_m_per_year\"\n])\n\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1020},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(date_numeric, height):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None, None, None]\n    \n    # Convert to numpy arrays and remove NaN values\n    X = np.array(date_numeric)\n    y = np.array(height)\n    \n    mask = ~(np.isnan(X) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None, None, None]\n    \n    X_clean = X[mask]\n    y_clean = y[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(X_clean)\n    \n    # Fit the model\n    model = sm.OLS(y_clean, X_with_const)\n    results = model.fit()\n    \n    # Extract results\n    intercept = results.params[0]\n    slope = results.params[1]\n    r_squared = results.rsquared\n    p_value = results.pvalues[1]  # p-value for the slope\n    std_err = results.bse[1]  # standard error for the slope\n    \n    return [slope, intercept, r_squared, p_value, std_err]\n\n# Apply OLS regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_ols_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\"),\n    pl.col(\"regression_results\").list.get(3).alias(\"p_value\"),\n    pl.col(\"regression_results\").list.get(4).alias(\"std_error\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n    # Convert standard error from m/day to m/year\n    (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\",\n    \"p_value\",\n    \"std_error_m_per_year\"\n])\n\nr"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1021},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(date_numeric, height):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None, None, None]\n    \n    # Convert to numpy arrays and remove NaN values\n    X = np.array(date_numeric)\n    y = np.array(height)\n    \n    mask = ~(np.isnan(X) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None, None, None]\n    \n    X_clean = X[mask]\n    y_clean = y[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(X_clean)\n    \n    # Fit the model\n    model = sm.OLS(y_clean, X_with_const)\n    results = model.fit()\n    \n    # Extract results\n    intercept = results.params[0]\n    slope = results.params[1]\n    r_squared = results.rsquared\n    p_value = results.pvalues[1]  # p-value for the slope\n    std_err = results.bse[1]  # standard error for the slope\n    \n    return [slope, intercept, r_squared, p_value, std_err]\n\n# Apply OLS regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_ols_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\"),\n    pl.col(\"regression_results\").list.get(3).alias(\"p_value\"),\n    pl.col(\"regression_results\").list.get(4).alias(\"std_error\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n    # Convert standard error from m/day to m/year\n    (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\",\n    \"p_value\",\n    \"std_error_m_per_year\"\n])\n\nre"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1022},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(date_numeric, height):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None, None, None]\n    \n    # Convert to numpy arrays and remove NaN values\n    X = np.array(date_numeric)\n    y = np.array(height)\n    \n    mask = ~(np.isnan(X) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None, None, None]\n    \n    X_clean = X[mask]\n    y_clean = y[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(X_clean)\n    \n    # Fit the model\n    model = sm.OLS(y_clean, X_with_const)\n    results = model.fit()\n    \n    # Extract results\n    intercept = results.params[0]\n    slope = results.params[1]\n    r_squared = results.rsquared\n    p_value = results.pvalues[1]  # p-value for the slope\n    std_err = results.bse[1]  # standard error for the slope\n    \n    return [slope, intercept, r_squared, p_value, std_err]\n\n# Apply OLS regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_ols_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\"),\n    pl.col(\"regression_results\").list.get(3).alias(\"p_value\"),\n    pl.col(\"regression_results\").list.get(4).alias(\"std_error\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n    # Convert standard error from m/day to m/year\n    (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\",\n    \"p_value\",\n    \"std_error_m_per_year\"\n])\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1023},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(date_numeric, height):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None, None, None]\n    \n    # Convert to numpy arrays and remove NaN values\n    X = np.array(date_numeric)\n    y = np.array(height)\n    \n    mask = ~(np.isnan(X) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None, None, None]\n    \n    X_clean = X[mask]\n    y_clean = y[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(X_clean)\n    \n    # Fit the model\n    model = sm.OLS(y_clean, X_with_const)\n    results = model.fit()\n    \n    # Extract results\n    intercept = results.params[0]\n    slope = results.params[1]\n    r_squared = results.rsquared\n    p_value = results.pvalues[1]  # p-value for the slope\n    std_err = results.bse[1]  # standard error for the slope\n    \n    return [slope, intercept, r_squared, p_value, std_err]\n\n# Apply OLS regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_ols_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\"),\n    pl.col(\"regression_results\").list.get(3).alias(\"p_value\"),\n    pl.col(\"regression_results\").list.get(4).alias(\"std_error\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n    # Convert standard error from m/day to m/year\n    (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\",\n    \"p_value\",\n    \"std_error_m_per_year\"\n])\n\nresu"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1024},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(date_numeric, height):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None, None, None]\n    \n    # Convert to numpy arrays and remove NaN values\n    X = np.array(date_numeric)\n    y = np.array(height)\n    \n    mask = ~(np.isnan(X) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None, None, None]\n    \n    X_clean = X[mask]\n    y_clean = y[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(X_clean)\n    \n    # Fit the model\n    model = sm.OLS(y_clean, X_with_const)\n    results = model.fit()\n    \n    # Extract results\n    intercept = results.params[0]\n    slope = results.params[1]\n    r_squared = results.rsquared\n    p_value = results.pvalues[1]  # p-value for the slope\n    std_err = results.bse[1]  # standard error for the slope\n    \n    return [slope, intercept, r_squared, p_value, std_err]\n\n# Apply OLS regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_ols_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\"),\n    pl.col(\"regression_results\").list.get(3).alias(\"p_value\"),\n    pl.col(\"regression_results\").list.get(4).alias(\"std_error\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n    # Convert standard error from m/day to m/year\n    (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\",\n    \"p_value\",\n    \"std_error_m_per_year\"\n])\n\nresul"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1025},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(date_numeric, height):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None, None, None]\n    \n    # Convert to numpy arrays and remove NaN values\n    X = np.array(date_numeric)\n    y = np.array(height)\n    \n    mask = ~(np.isnan(X) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None, None, None]\n    \n    X_clean = X[mask]\n    y_clean = y[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(X_clean)\n    \n    # Fit the model\n    model = sm.OLS(y_clean, X_with_const)\n    results = model.fit()\n    \n    # Extract results\n    intercept = results.params[0]\n    slope = results.params[1]\n    r_squared = results.rsquared\n    p_value = results.pvalues[1]  # p-value for the slope\n    std_err = results.bse[1]  # standard error for the slope\n    \n    return [slope, intercept, r_squared, p_value, std_err]\n\n# Apply OLS regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_ols_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\"),\n    pl.col(\"regression_results\").list.get(3).alias(\"p_value\"),\n    pl.col(\"regression_results\").list.get(4).alias(\"std_error\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n    # Convert standard error from m/day to m/year\n    (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\",\n    \"p_value\",\n    \"std_error_m_per_year\"\n])\n\nresult"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1026},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(date_numeric, height):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    if len(date_numeric) < 2:\n        return [None, None, None, None, None]\n    \n    # Convert to numpy arrays and remove NaN values\n    X = np.array(date_numeric)\n    y = np.array(height)\n    \n    mask = ~(np.isnan(X) | np.isnan(y))\n    if mask.sum() < 2:\n        return [None, None, None, None, None]\n    \n    X_clean = X[mask]\n    y_clean = y[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(X_clean)\n    \n    # Fit the model\n    model = sm.OLS(y_clean, X_with_const)\n    results = model.fit()\n    \n    # Extract results\n    intercept = results.params[0]\n    slope = results.params[1]\n    r_squared = results.rsquared\n    p_value = results.pvalues[1]  # p-value for the slope\n    std_err = results.bse[1]  # standard error for the slope\n    \n    return [slope, intercept, r_squared, p_value, std_err]\n\n# Apply OLS regression for each short_id\nresults = df_with_numeric_date.group_by(\"short_id\").agg([\n    pl.col(\"date_numeric\", \"p90_height_m\").map_batches(\n        lambda batch: fit_ols_regression(\n            batch[\"date_numeric\"].to_list(),\n            batch[\"p90_height_m\"].to_list()\n        ),\n        return_dtype=pl.List(pl.Float64)\n    ).alias(\"regression_results\")\n]).with_columns([\n    pl.col(\"regression_results\").list.get(0).alias(\"slope_m_per_day\"),\n    pl.col(\"regression_results\").list.get(1).alias(\"intercept\"),\n    pl.col(\"regression_results\").list.get(2).alias(\"r_squared\"),\n    pl.col(\"regression_results\").list.get(3).alias(\"p_value\"),\n    pl.col(\"regression_results\").list.get(4).alias(\"std_error\")\n]).with_columns([\n    # Convert slope from m/day to m/year\n    (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n    # Convert standard error from m/day to m/year\n    (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n]).select([\n    \"short_id\", \n    \"growth_rate_m_per_year\", \n    \"intercept\", \n    \"r_squared\",\n    \"p_value\",\n    \"std_error_m_per_year\"\n])\n\nresults"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1356","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1026},"position":{"line":129,"character":7},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1027},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\nimport polars as pl\nimport numpy as np\nimport statsmodels.api as sm\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nprint(results)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1358","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1027},"position":{"line":152,"character":14},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1028},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\n# import numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nprint(results)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1360","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1028},"position":{"line":63,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1029},"contentChanges":[{"text":"# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nprint(results)\nimport polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1362","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1029},"position":{"line":148,"character":18},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1030},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1364","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1030},"position":{"line":149,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1031},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\n# # Apply OLS regression for each short_id\n# results = (\n#     df_with_numeric_date\n#     .group_by(\"short_id\")\n#     .map_groups(fit_ols_regression)\n#     .with_columns([\n#         # Convert slope from m/day to m/year\n#         (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n#         # Convert standard error from m/day to m/year\n#         (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n#     ])\n#     .select([\n#         \"short_id\", \n#         \"growth_rate_m_per_year\", \n#         \"intercept\", \n#         \"r_squared\",\n#         \"p_value\",\n#         \"std_error_m_per_year\"\n#     ])\n# )\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1366","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1031},"position":{"line":129,"character":2},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1032},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\n\n# # Apply OLS regression for each short_id\n# results = (\n#     df_with_numeric_date\n#     .group_by(\"short_id\")\n#     .map_groups(fit_ols_regression)\n#     .with_columns([\n#         # Convert slope from m/day to m/year\n#         (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n#         # Convert standard error from m/day to m/year\n#         (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n#     ])\n#     .select([\n#         \"short_id\", \n#         \"growth_rate_m_per_year\", \n#         \"intercept\", \n#         \"r_squared\",\n#         \"p_value\",\n#         \"std_error_m_per_year\"\n#     ])\n# )\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1033},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\n\n\n# # Apply OLS regression for each short_id\n# results = (\n#     df_with_numeric_date\n#     .group_by(\"short_id\")\n#     .map_groups(fit_ols_regression)\n#     .with_columns([\n#         # Convert slope from m/day to m/year\n#         (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n#         # Convert standard error from m/day to m/year\n#         (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n#     ])\n#     .select([\n#         \"short_id\", \n#         \"growth_rate_m_per_year\", \n#         \"intercept\", \n#         \"r_squared\",\n#         \"p_value\",\n#         \"std_error_m_per_year\"\n#     ])\n# )\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1369","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1033},"position":{"line":130,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1034},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\nd\n\n# # Apply OLS regression for each short_id\n# results = (\n#     df_with_numeric_date\n#     .group_by(\"short_id\")\n#     .map_groups(fit_ols_regression)\n#     .with_columns([\n#         # Convert slope from m/day to m/year\n#         (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n#         # Convert standard error from m/day to m/year\n#         (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n#     ])\n#     .select([\n#         \"short_id\", \n#         \"growth_rate_m_per_year\", \n#         \"intercept\", \n#         \"r_squared\",\n#         \"p_value\",\n#         \"std_error_m_per_year\"\n#     ])\n# )\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1035},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf\n\n# # Apply OLS regression for each short_id\n# results = (\n#     df_with_numeric_date\n#     .group_by(\"short_id\")\n#     .map_groups(fit_ols_regression)\n#     .with_columns([\n#         # Convert slope from m/day to m/year\n#         (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n#         # Convert standard error from m/day to m/year\n#         (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n#     ])\n#     .select([\n#         \"short_id\", \n#         \"growth_rate_m_per_year\", \n#         \"intercept\", \n#         \"r_squared\",\n#         \"p_value\",\n#         \"std_error_m_per_year\"\n#     ])\n# )\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1036},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_\n\n# # Apply OLS regression for each short_id\n# results = (\n#     df_with_numeric_date\n#     .group_by(\"short_id\")\n#     .map_groups(fit_ols_regression)\n#     .with_columns([\n#         # Convert slope from m/day to m/year\n#         (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n#         # Convert standard error from m/day to m/year\n#         (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n#     ])\n#     .select([\n#         \"short_id\", \n#         \"growth_rate_m_per_year\", \n#         \"intercept\", \n#         \"r_squared\",\n#         \"p_value\",\n#         \"std_error_m_per_year\"\n#     ])\n# )\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1037},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_w\n\n# # Apply OLS regression for each short_id\n# results = (\n#     df_with_numeric_date\n#     .group_by(\"short_id\")\n#     .map_groups(fit_ols_regression)\n#     .with_columns([\n#         # Convert slope from m/day to m/year\n#         (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n#         # Convert standard error from m/day to m/year\n#         (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n#     ])\n#     .select([\n#         \"short_id\", \n#         \"growth_rate_m_per_year\", \n#         \"intercept\", \n#         \"r_squared\",\n#         \"p_value\",\n#         \"std_error_m_per_year\"\n#     ])\n# )\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1038},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_wi\n\n# # Apply OLS regression for each short_id\n# results = (\n#     df_with_numeric_date\n#     .group_by(\"short_id\")\n#     .map_groups(fit_ols_regression)\n#     .with_columns([\n#         # Convert slope from m/day to m/year\n#         (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n#         # Convert standard error from m/day to m/year\n#         (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n#     ])\n#     .select([\n#         \"short_id\", \n#         \"growth_rate_m_per_year\", \n#         \"intercept\", \n#         \"r_squared\",\n#         \"p_value\",\n#         \"std_error_m_per_year\"\n#     ])\n# )\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1039},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_wit\n\n# # Apply OLS regression for each short_id\n# results = (\n#     df_with_numeric_date\n#     .group_by(\"short_id\")\n#     .map_groups(fit_ols_regression)\n#     .with_columns([\n#         # Convert slope from m/day to m/year\n#         (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n#         # Convert standard error from m/day to m/year\n#         (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n#     ])\n#     .select([\n#         \"short_id\", \n#         \"growth_rate_m_per_year\", \n#         \"intercept\", \n#         \"r_squared\",\n#         \"p_value\",\n#         \"std_error_m_per_year\"\n#     ])\n# )\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1040},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with\n\n# # Apply OLS regression for each short_id\n# results = (\n#     df_with_numeric_date\n#     .group_by(\"short_id\")\n#     .map_groups(fit_ols_regression)\n#     .with_columns([\n#         # Convert slope from m/day to m/year\n#         (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n#         # Convert standard error from m/day to m/year\n#         (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n#     ])\n#     .select([\n#         \"short_id\", \n#         \"growth_rate_m_per_year\", \n#         \"intercept\", \n#         \"r_squared\",\n#         \"p_value\",\n#         \"std_error_m_per_year\"\n#     ])\n# )\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1041},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# # Apply OLS regression for each short_id\n# results = (\n#     df_with_numeric_date\n#     .group_by(\"short_id\")\n#     .map_groups(fit_ols_regression)\n#     .with_columns([\n#         # Convert slope from m/day to m/year\n#         (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n#         # Convert standard error from m/day to m/year\n#         (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n#     ])\n#     .select([\n#         \"short_id\", \n#         \"growth_rate_m_per_year\", \n#         \"intercept\", \n#         \"r_squared\",\n#         \"p_value\",\n#         \"std_error_m_per_year\"\n#     ])\n# )\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1378","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1041},"position":{"line":129,"character":20},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1042},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1380","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1042},"position":{"line":131,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1043},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    # .select([\n    #     \"short_id\", \n    #     \"growth_rate_m_per_year\", \n    #     \"intercept\", \n    #     \"r_squared\",\n    #     \"p_value\",\n    #     \"std_error_m_per_year\"\n    # ])\n)\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1382","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1043},"position":{"line":142,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1044},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    # .select([\n    #     \"short_id\", \n    #     \"growth_rate_m_per_year\", \n    #     \"intercept\", \n    #     \"r_squared\",\n    #     \"p_value\",\n    #     \"std_error_m_per_year\"\n    # ])\n)\n\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1045},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    # .select([\n    #     \"short_id\", \n    #     \"growth_rate_m_per_year\", \n    #     \"intercept\", \n    #     \"r_squared\",\n    #     \"p_value\",\n    #     \"std_error_m_per_year\"\n    # ])\n)\n\nr"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1046},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    # .select([\n    #     \"short_id\", \n    #     \"growth_rate_m_per_year\", \n    #     \"intercept\", \n    #     \"r_squared\",\n    #     \"p_value\",\n    #     \"std_error_m_per_year\"\n    # ])\n)\n\nre"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1047},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    # .select([\n    #     \"short_id\", \n    #     \"growth_rate_m_per_year\", \n    #     \"intercept\", \n    #     \"r_squared\",\n    #     \"p_value\",\n    #     \"std_error_m_per_year\"\n    # ])\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1048},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    # .select([\n    #     \"short_id\", \n    #     \"growth_rate_m_per_year\", \n    #     \"intercept\", \n    #     \"r_squared\",\n    #     \"p_value\",\n    #     \"std_error_m_per_year\"\n    # ])\n)\n\nresu"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1049},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    # .select([\n    #     \"short_id\", \n    #     \"growth_rate_m_per_year\", \n    #     \"intercept\", \n    #     \"r_squared\",\n    #     \"p_value\",\n    #     \"std_error_m_per_year\"\n    # ])\n)\n\nresul"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1050},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    # .select([\n    #     \"short_id\", \n    #     \"growth_rate_m_per_year\", \n    #     \"intercept\", \n    #     \"r_squared\",\n    #     \"p_value\",\n    #     \"std_error_m_per_year\"\n    # ])\n)\n\nresult"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1051},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    # .select([\n    #     \"short_id\", \n    #     \"growth_rate_m_per_year\", \n    #     \"intercept\", \n    #     \"r_squared\",\n    #     \"p_value\",\n    #     \"std_error_m_per_year\"\n    # ])\n)\n\nresults"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1391","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1051},"position":{"line":152,"character":7},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1052},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nresults"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1393","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1052},"position":{"line":142,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1053},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nresults"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1395","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1053},"position":{"line":134,"character":10},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1054},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nresults."}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1055},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nresults.s"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1056},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nresults.so"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1057},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nresults.sor"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1058},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nresults.sort"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1401","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1058},"position":{"line":159,"character":12},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1059},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nresults.sort()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1403","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1059},"position":{"line":159,"character":13},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1060},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nresults.sort(\"growth_rate_m_per_year\", descending=True)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1405","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1060},"position":{"line":159,"character":54},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1061},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results.sort(\"growth_rate_m_per_year\", descending=True)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1407","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1061},"position":{"line":159,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1062},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .sort(\"growth_rate_m_per_year\", descending=True)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1409","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1062},"position":{"line":160,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1063},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .sort(\"growth_rate_m_per_year\", descending=True)\n "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1411","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1063},"position":{"line":161,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1064},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1413","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1064},"position":{"line":161,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1065},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    \n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1415","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1065},"position":{"line":160,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1066},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1417","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1066},"position":{"line":160,"character":5},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1067},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .f\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1068},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .fi\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1069},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .fil\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1070},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filt\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1071},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filte\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1072},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1073},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter()\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1425","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1073},"position":{"line":160,"character":12},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1074},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\").is_not_null())\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1427","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1074},"position":{"line":160,"character":58},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1075},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") )\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1076},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") >)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1077},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > )\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1078},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1432","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1078},"position":{"line":160,"character":48},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1079},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch)\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1434","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1079},"position":{"line":160,"character":51},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1080},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) \ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1081},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) &\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1082},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & \ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1083},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & f\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1084},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & fi\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1085},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & fil\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1086},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & file\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1087},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filet\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1088},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filete\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1089},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & fileter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1445","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1089},"position":{"line":65,"character":54},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1090},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filete\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1091},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filet\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1092},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & file\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1093},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & fil\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1094},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filt\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1095},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filte\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1096},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1453","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1096},"position":{"line":65,"character":53},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1097},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    \n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1098},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1456","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1098},"position":{"line":68,"character":78},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1099},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    \n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1458","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1099},"position":{"line":68,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1100},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1460","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1100},"position":{"line":67,"character":64},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1101},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n                                      )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1462","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1101},"position":{"line":69,"character":38},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1102},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n                                      .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021)))\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1464","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1102},"position":{"line":69,"character":112},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1103},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n                                  .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021)))\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1104},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n                              .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021)))\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1105},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n                          .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021)))\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1106},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n                      .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021)))\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1107},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n                  .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021)))\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1108},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n              .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021)))\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1109},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n          .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021)))\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1110},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n      .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021)))\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1111},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n  .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021)))\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1112},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021)))\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1475","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1112},"position":{"line":69,"character":74},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1113},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                                      )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1477","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1113},"position":{"line":70,"character":38},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1114},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n)\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1479","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1114},"position":{"line":70,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1115},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                                      )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1481","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1115},"position":{"line":70,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1116},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n.filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021)))\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1117},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n                                      .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021)))\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1118},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n]\n                                      )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1119},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1486","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1119},"position":{"line":68,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1120},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df.with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1488","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1120},"position":{"line":66,"character":24},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1121},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n    pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1490","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1121},"position":{"line":67,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1122},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1492","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1122},"position":{"line":68,"character":8},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1123},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n                        \n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1494","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1123},"position":{"line":70,"character":24},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1124},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n                    \n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1125},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n                \n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1126},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n            \n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1127},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n        \n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1128},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    \n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1129},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1501","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1129},"position":{"line":70,"character":78},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1130},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                        \n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1503","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1130},"position":{"line":71,"character":24},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1131},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                    \n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1132},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                \n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1133},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n            \n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1134},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        \n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1135},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    \n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1136},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1137},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    # .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1511","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1137},"position":{"line":71,"character":24},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1138},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1513","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1138},"position":{"line":163,"character":49},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1139},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\np"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1140},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1516","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1140},"position":{"line":166,"character":2},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1141},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx."}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1518","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1141},"position":{"line":166,"character":3},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1142},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.l"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1143},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.li"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1144},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.lin"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1145},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.line"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1523","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1145},"position":{"line":166,"character":7},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1146},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.lin"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1147},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.li"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1148},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.l"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1149},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx."}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1150},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.s"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1151},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.sc"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1152},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.sca"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1531","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1152},"position":{"line":166,"character":6},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1153},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(data_frame, x, y, color, symbol, size, hover_name, hover_data, custom_data, text, facet_row, facet_col, facet_col_wrap, facet_row_spacing, facet_col_spacing, error_x, error_x_minus, error_y, error_y_minus, animation_frame, animation_group, category_orders, labels, orientation, color_discrete_sequence, color_discrete_map, color_continuous_scale, range_color, color_continuous_midpoint, symbol_sequence, symbol_map, opacity, size_max, marginal_x, marginal_y, trendline, trendline_options, trendline_color_override, trendline_scope, log_x, log_y, range_x, range_y, render_mode, title, subtitle, template, width, height)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1533","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1153},"position":{"line":166,"character":629},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1154},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(data_frame, x, y, color, symbol, size, hover_name, hover_data, custom_data, text, facet_row, facet_col, facet_col_wrap, facet_row_spacing, facet_col_spacing, error_x, error_x_minus, error_y, error_y_minus, animation_frame, animation_group, category_orders, labels, orientation, color_discrete_sequence, color_discrete_map, color_continuous_scale, range_color, color_continuous_midpoint, symbol_sequence, symbol_map, opacity, size_max, marginal_x, marginal_y, trendline, trendline_options, trendline_color_override, trendline_scope, log_x, log_y, range_x, range_y, render_mode, title, subtitle, template, width, height)()"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1535","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1154},"position":{"line":166,"character":630},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1155},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1156},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    r"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1157},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    re"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1158},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    res"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1159},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    resu"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1160},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    resul"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1161},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    result"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1162},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1544","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1162},"position":{"line":167,"character":11},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1163},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1164},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    ,"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1165},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1166},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1167},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x="}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1550","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1167},"position":{"line":168,"character":8},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1168},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x=s"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1169},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x=sh"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1170},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x=sho"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1171},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x=shor"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1172},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x=short"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1173},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x=short_"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1174},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x=short_i"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1175},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x=short_id"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1559","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1175},"position":{"line":168,"character":16},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1176},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x=short_id\n    "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1561","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1176},"position":{"line":169,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1177},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x=short_id\n    , y='growth_rate_m_per_year'"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1563","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1177},"position":{"line":169,"character":32},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1178},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1565","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1178},"position":{"line":168,"character":17},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1179},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1180},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1568","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1180},"position":{"line":170,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1181},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1570","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1181},"position":{"line":169,"character":32},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1182},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1183},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    ,"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1184},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1574","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1184},"position":{"line":170,"character":6},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1185},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , t"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1186},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , te"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1187},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , tem"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1188},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , temp"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1579","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1188},"position":{"line":170,"character":10},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1189},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1581","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1189},"position":{"line":170,"character":29},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1190},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n    "}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1191},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\n(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1584","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1191},"position":{"line":171,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1192},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nr(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1193},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nre(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1194},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1195},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1196},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres =(results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1197},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1591","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1197},"position":{"line":168,"character":6},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1198},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1199},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\n"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1200},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nr"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1201},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nre"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1202},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    results\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1597","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1202},"position":{"line":173,"character":3},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1203},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres\npx.scatter(\n    r\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1204},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres\npx.scatter(\n    re\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1205},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres\npx.scatter(\n    res\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1601","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1205},"position":{"line":169,"character":7},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1206},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    res\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                        \n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1603","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1206},"position":{"line":77,"character":24},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1207},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    res\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (\n    df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n                        \n                       )\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1605","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1207},"position":{"line":73,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1208},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    res\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (\n    df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1607","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1208},"position":{"line":78,"character":0},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1209},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    res\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (\n    df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    .filter(pl.col(\"date_numeric\").is_not_null())\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1609","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1209},"position":{"line":78,"character":49},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1210},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    res\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (\n    df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    .filter(pl.col(\"date_numeric\").is_not_null())\n    \ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1611","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1210},"position":{"line":79,"character":4},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1211},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    res\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (\n    df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    .filter(pl.col(\"date_numeric\").is_not_null())\n)\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1613","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1211},"position":{"line":79,"character":1},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1212},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    res\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (\n    df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    .filter(pl.col(\"area_m2_from_chm\").is_not_null())\n)\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1615","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1212},"position":{"line":78,"character":36},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1213},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    res\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (\n    df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    .filter(pl.col(\"area_m2_from_chm\") )\n)\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1214},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    res\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (\n    df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    .filter(pl.col(\"area_m2_from_chm\") >)\n)\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1215},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    res\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (\n    df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    .filter(pl.col(\"area_m2_from_chm\") > )\n)\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1216},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    res\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (\n    df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    .filter(pl.col(\"area_m2_from_chm\") > 1)\n)\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1217},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    res\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (\n    df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    .filter(pl.col(\"area_m2_from_chm\") > 10)\n)\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1218},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    res\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (\n    df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    .filter(pl.col(\"area_m2_from_chm\") > 100)\n)\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1219},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    res\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (\n    df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    .filter(pl.col(\"area_m2_from_chm\") > 1000)\n)\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1220},"contentChanges":[{"text":"import polars as pl\nimport plotly.express as px\n# from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport statsmodels.api as sm\n\n# load the chm data\n\ndf = pl.read_parquet(\"output\\\\calc_stats\\\\rehab_chm_stats.parquet\")\n\ndf\n# choose a pre-2015 area\n\ndf_pre_2015 = df.filter(pl.col('short_id') == 'b9ceaa')\n\ndf_pre_2015.sort('date')\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'p90_height_m'\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    \n)\n_fig.update_layout(yaxis_title='P90 Height (m)', xaxis_title=None)\n_fig.show()\n_fig = px.line(\n    df_pre_2015\n    , x = 'date'\n    , y = 'woody_cover'\n    , template = 'plotly_white'\n    , title = '% Woody Cover (>1m) for Area b9ceaa'\n    , hover_data={'woody_cover': ':.1%' }\n)\n_fig.update_layout(yaxis_title='Woody Cover %', xaxis_title=None)\n_fig.update_yaxes(tickformat='0%')\n_fig.show()\n_df = (df\n        .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n        .sort(by=['short_id', 'date'])\n      )\n\n_n_categories = _df.select('short_id').unique().height\n_n_cols = 3  # facet_col_wrap value\n_n_rows = (_n_categories + _n_cols - 1) // _n_cols\n\n\n_fig = px.line(\n    _df\n    , x = 'date'\n    , y = 'p90_height_m'\n    , facet_col = 'short_id'\n    , facet_col_wrap = _n_cols\n    # , facet_row_wrap = _n_rows\n    , template = 'plotly_white'\n    , title = 'P90 Height Over Time for Area b9ceaa'\n    , height=400*_n_rows\n    , facet_row_spacing = 0.005\n)\n_fig.update_layout(yaxis_title=None, xaxis_title=None)\n\n_fig.show()\n# _n_categories\npx.scatter(\n    res\n    , x='short_id'\n    , y='growth_rate_m_per_year'\n    , template='plotly_white'\n)\n\n\n# Convert date to numeric (days since epoch) & filter\ndf_with_numeric_date = (\n    df\n    .with_columns([\n        pl.col(\"date\").dt.epoch(time_unit=\"d\").alias(\"date_numeric\")\n    ])\n    .filter((pl.col('veg_type') != 'pasture') & (pl.col('rehab_year') < 2021))\n    .filter(pl.col(\"area_m2_from_chm\") > 10000)\n)\ndef fit_ols_regression(group_data):\n    \"\"\"Fit OLS regression using statsmodels and return key statistics\"\"\"\n    # Get the short_id for this group (should be the same for all rows)\n    short_id = group_data[\"short_id\"][0]\n    \n    date_numeric = group_data[\"date_numeric\"].to_numpy()\n    height = group_data[\"p90_height_m\"].to_numpy()\n    \n    if len(date_numeric) < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    # Remove NaN values\n    mask = ~(np.isnan(date_numeric) | np.isnan(height))\n    if mask.sum() < 2:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n    \n    date_clean = date_numeric[mask]\n    height_clean = height[mask]\n    \n    # Add constant term for intercept\n    X_with_const = sm.add_constant(date_clean)\n    \n    try:\n        # Fit the model\n        model = sm.OLS(height_clean, X_with_const)\n        results = model.fit()\n        \n        # Extract results\n        intercept = results.params[0]\n        slope = results.params[1]\n        r_squared = results.rsquared\n        p_value = results.pvalues[1]  # p-value for the slope\n        std_err = results.bse[1]  # standard error for the slope\n        \n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [slope],\n            \"intercept\": [intercept], \n            \"r_squared\": [r_squared],\n            \"p_value\": [p_value],\n            \"std_error\": [std_err]\n        })\n    except:\n        return pl.DataFrame({\n            \"short_id\": [short_id],\n            \"slope_m_per_day\": [None],\n            \"intercept\": [None], \n            \"r_squared\": [None],\n            \"p_value\": [None],\n            \"std_error\": [None]\n        })\n\ndf_with_numeric_date\n\n# Apply OLS regression for each short_id\nresults = (\n    df_with_numeric_date\n    .group_by(\"short_id\")\n    .map_groups(fit_ols_regression)\n    .with_columns([\n        # Convert slope from m/day to m/year\n        (pl.col(\"slope_m_per_day\") * 365.25).alias(\"growth_rate_m_per_year\"),\n        # Convert standard error from m/day to m/year\n        (pl.col(\"std_error\") * 365.25).alias(\"std_error_m_per_year\")\n    ])\n    .select([\n        \"short_id\", \n        \"growth_rate_m_per_year\", \n        \"intercept\", \n        \"r_squared\",\n        \"p_value\",\n        \"std_error_m_per_year\"\n    ])\n)\n\nres = (results\n    .filter(pl.col(\"growth_rate_m_per_year\") > 0)\n    .sort(\"growth_rate_m_per_year\", descending=True)\n)\n\nres"}]}}
[DEBUG] Received message: {"jsonrpc":"2.0","id":"1624","method":"textDocument/inlineCompletion","params":{"textDocument":{"uri":"file:///__marimo_copilot__.py","version":1220},"position":{"line":78,"character":46},"context":{"triggerKind":1},"formattingOptions":{"tabSize":4,"insertSpaces":true}}}
[INFO] WebSocket closed with code 1000, reason: 
[INFO] Client connection closed - Code: 1000, Reason: 
